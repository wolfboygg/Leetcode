package lambda;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class Main {
    public static void main(String[] args) {

        try {
            String str = "1000101010103";
            String substring = str.substring(str.length() - 1);
            System.out.println(substring);
//            String str = "";
//            byte[] base64Decode = Base64Copy.decode(str, 0);
//            SecretKeySpec secretKeySpec = new SecretKeySpec("3yx1YH314P40K7o2".getBytes(), "AES");
//            IvParameterSpec ivParameterSpec = new IvParameterSpec("wMI4e8E1iT3ki8Ff".getBytes());
//            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
//            cipher.init(2, secretKeySpec, ivParameterSpec);
//            String result = new String(cipher.doFinal(base64Decode), "UTF-8");
//            System.out.println(result);
//            byte[] decode = Base64Copy.decode("6I+g6JCd6KeG6aKR", 0);
//            System.out.println(String.valueOf(decode));
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
